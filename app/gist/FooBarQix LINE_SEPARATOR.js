if ( 'prettyPrint' in window ) {} else {
    document.write( '<script type="text/javascript" src="http://gist-it.appspot.com/assets/prettify/prettify.js"></script>' );
}


document.write( '<link rel="stylesheet" href="http://gist-it.appspot.com/assets/embed.css"/>' );


document.write( '<link rel="stylesheet" href="http://gist-it.appspot.com/assets/prettify/prettify.css"/>' );

document.write( '<div class="gist-it-gist">\n<div class="gist-file">\n    <div class="gist-data">\n        \n        <pre class="prettyprint">package foobarqix;\n\npublic class FooBarQix {\n\n    static final String LINE_SEPARATOR = System.getProperty("line.separator");\n\n    // rules of foobarqix as arrays\n    static final int[] NUMBERS = {3, 5, 7};\n    static final String[] REPLACEMENTS = {"Foo", "Bar", "Qix"};\n\n    static final String[] NUMBERS_AS_TEXT;\n\n    static {\n        NUMBERS_AS_TEXT = new String[NUMBERS.length];\n        for (int i = 0; i &lt; NUMBERS.length; i++) {\n            NUMBERS_AS_TEXT[i] = String.valueOf(NUMBERS[i]);\n        }\n    }\n\n    public static String oneToAHundred() {\n        return computeWithLimits(1, 100);\n    }\n\n    public static String computeWithLimits(int lowerLimit, int upperLimit) {\n        String output = "";\n        for (int i = lowerLimit; i &lt;= upperLimit; i++) {\n            output += compute(i) + (i == upperLimit ? "" : LINE_SEPARATOR);\n        }\n        return output;\n    }\n\n    private static String compute(int number) {\n        String result = computeDivisionRules(number);\n        result += computeContentRules(number);\n\n        if (result.isEmpty()) {\n            return String.valueOf(number);\n        }\n        return result;\n    }\n\n    private static String computeDivisionRules(int currentNumber) {\n        String result = "";\n        for (int i = 0; i &lt; NUMBERS.length; i++) {\n            if (currentNumber % NUMBERS[i] == 0) {\n                result += REPLACEMENTS[i];\n            }\n        }\n        return result;\n    }\n\n    private static String computeContentRules(int number) {\n        String numberAsText = String.valueOf(number);\n        String numberAsTextReplaced = numberAsText;\n        for (int i = 0; i &lt; NUMBERS.length; i++) {\n            numberAsTextReplaced = numberAsTextReplaced.replaceAll(NUMBERS_AS_TEXT[i], REPLACEMENTS[i]);\n        }\n        return removeDigitLeft(numberAsTextReplaced);\n    }\n\n    private static String removeDigitLeft(String text) {\n        return text.replaceAll("[0-9]*", "");\n    }\n\n    public static void main(String[] args) {\n        System.out.println(FooBarQix.oneToAHundred());\n    }\n}\n</pre>\n        \n    </div>\n    \n    <div class="gist-meta">\n        \n        <span><a href="https://github.com/youribonnaffe/FooBarQix/blob/master/src/main/java/foobarqix/FooBarQix.java">This Gist</a> brought to you by <a href="http://gist-it.appspot.com">gist-it</a>.</span>\n        \n        <span style="float: right; color: #369;"><a href="https://github.com/youribonnaffe/FooBarQix/raw/master/src/main/java/foobarqix/FooBarQix.java">view raw</a></span>\n        <span style="float: right; margin-right: 8px;">\n            <a style="color: rgb(102, 102, 102);" href="https://github.com/youribonnaffe/FooBarQix/blob/master/src/main/java/foobarqix/FooBarQix.java">FooBarQix.java</a></span>\n            <!-- Generated by: http://gist-it.appspot.com -->\n    </div>\n    \n</div>\n</div>' );

document.write( '<script type="text/javascript">prettyPrint();</script>' );